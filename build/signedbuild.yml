name: $(date:yyyy-MM-dd)$(rev:.rr)
trigger: none
pr: none
variables:
  BuildPlatform: 'x86'
  MAICreateNuget: 'true'
  PublicRelease: 'true'
  SignAppForRelease: 'false'
  TeamName: 'Accessibility Insights Windows'
  system.debug: 'true' #set to true in case our signed build flakes out again
  runCodesignValidationInjection: 'false'

jobs:

- job: SignedRelease
  dependsOn: 
  - ComplianceRelease
  - ComplianceDebug
  condition: and(succeeded(), succeeded())
  pool: VSEng-MicroBuildVS2019
  variables:
    runCodesignValidationInjection: 'true'
    SignAppForRelease: 'true'

  steps:
  - task: ms-vseng.MicroBuildTasks.a0262b21-fb8f-46f8-bb9a-60ed560d4a87.MicroBuildLocalizationPlugin@1
    displayName: 'Install Localization Plugin'

  - task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1
    displayName: 'Install Signing Plugin'
    inputs:
      signType: real

  - task: NuGetToolInstaller@1
    displayName: 'Use NuGet 5.x'
    inputs:
      versionSpec: '5.x'

  - task: NuGetCommand@2
    displayName: 'NuGet restore'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet restore'
    inputs:
      command: restore
      projects: |
        **\*.csproj

  - task: VSBuild@1
    displayName: 'Build Solution **\AccessibilityInsights.sln'
    inputs:
      vsVersion: 16.0
      platform: '$(BuildPlatform)'
      configuration: SignedRelease
      solution: '**/AccessibilityInsights.sln'  # we only want to build AccessibilityInsights for signing

  - task: CopyFiles@2
    displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
    inputs:
      Contents: '**\bin\release\**'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: msi'
    inputs:
      PathtoPublish: 'src\MSI\bin\Release\msi'
      ArtifactName: 'msi'

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-binskim.BinSkim@3
    displayName: 'Run BinSkim'
    inputs:
      InputType: Basic
      # Double-quote syntax with trailing backslash on each line concatenates lines without spaces
      AnalyzeTarget: "src\\AccessibilityInsights\\bin\\Release\\net472\\*.exe;\
                      src\\AccessibilityInsights\\bin\\Release\\net472\\AccessibilityInsights.*.dll;\
                      src\\AccessibilityInsights.VersionSwitcher\\bin\\Release\\net472\\*.exe;\
                      src\\AccessibilityInsights.VersionSwitcher\\bin\\Release\\net472\\AccessibilityInsights.*.dll;"

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-report.SdtReport@1
    displayName: 'Create Security Analysis Report (BinSkim)'
    inputs:
      BinSkim: true

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@2
    displayName: 'Publish Security Analysis Logs (BinSkim)'

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
    displayName: 'Post Analysis (BinSkim)'
    inputs:
      BinSkim: true

  - task: VSTest@2
    displayName: 'Test Assemblies **\release\*test*.dll;-:**\obj\**'
    inputs:
      testAssemblyVer2: |
        **\*test*.dll
        !**\obj\**
      vsTestVersion: 16.0
      codeCoverageEnabled: false
      platform: '$(BuildPlatform)'
      configuration: release
      rerunFailedTests: true
      testFiltercriteria: 'TestCategory!=NoStrongName'

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-uploadtotsa.TSAUpload@1
    displayName: 'TSA upload (BinSkim)'
    inputs:
      tsaVersion: TsaV2
      codebase: NewOrUpdate
      codeBaseName: $(TSACodeBaseName)
      notificationAlias: $(TSANotificationAlias)
      codeBaseAdmins: $(TSACodeBaseAdmins)
      instanceUrlForTsaV2: $(TSAInstance)
      projectNameMSENG: $(TSAProjectName)
      areaPath: $(TSAAreaPath)
      iterationPath: $(TSAIterationPath)
      uploadAPIScan: false
      uploadCredScan: false
      uploadFortifySCA: false
      uploadFxCop: false
      uploadModernCop: false
      uploadPoliCheck: false
      uploadPREfast: false
      uploadRoslyn: false
      uploadTSLint: false

  - task: ms-vseng.MicroBuildTasks.521a94ea-9e68-468a-8167-6dcf361ea776.MicroBuildCleanup@1
    displayName: 'Perform Cleanup Tasks'
    condition: succeededOrFailed()
